(ns clj-stress-ng.core
  (:use [clojure.java.shell :only [sh]]
        [clj-stress-ng.stressors]))

(def available-stressors supported-stressors)
(def ^:private stress-ng-executable "stress-ng")
(def ^:private column-in-stress-ng-output
  {:stressor-name 3
   :bogo-ops 4
   :real-time 5
   :usr-time 6
   :sys-time 7})

(defn- workers-for-stress-ng-command
  "Returns a vector of strings representing a stressor and the number
  of workers for a stress-ng execution. For example:
  [\"--cache\" \"2\"]"
  [stressor]
  (let [stressor-name (name (key stressor))
        stressor-options (val stressor)
        workers (:workers stressor-options)]
    [(str "--" stressor-name)
     (str workers)]))

(defn- option-for-stress-ng-command
  "Returns a vector of strings that represents a specific option
  for a stress-ng execution. For example:
  [\"--cpu-load\" \"50\" \"--cpu-method\" \"hanoi\"]"
  [stressor-name option-name option-value]
  [(str "--" stressor-name "-" option-name)
   (str option-value)])

(defn- options-for-stress-ng-command
  "Returns a vector of strings that represents all the options for a
  stress-ng execution except the number of workers for each stressor.
  The reason is that the number of workers follows a different format.
  For example: number of stressor -> --cpu 1
  other options -> --cpu-ops 1000, --cpu-method \"double\", etc."
  [stressor]
  (let [stressor-name (name (key stressor))
        stressor-options (val stressor)
        stressor-options-without-workers (dissoc stressor-options :workers)]
    (->> (map
           #(option-for-stress-ng-command
             stressor-name (name (key %)) (val %))
           stressor-options-without-workers)
         (flatten)
         (into []))))

(defn- stress-ng-command
  "Returns a vector of strings that represents a stress-ng command
  with the stressors and the timeout (seconds) specified."
  [stressors seconds]
  (->> [stress-ng-executable
        (map (partial workers-for-stress-ng-command) stressors)
        (map (partial options-for-stress-ng-command) stressors)
        "--metrics-brief"
        "--timeout" (str seconds "s")]
       (flatten)
       (into [])))

(defn- stress-ng-output
  "Executes stress-ng with the given stressors and timeout (seconds)
  and returns the output of the command (stdout).
  Raises an exception if the stress-ng command returns an error."
  [stressors seconds]
  (let [command (stress-ng-command stressors seconds)
        command-result (apply sh command)]
    (if (clojure.string/blank? (command-result :err))
      (command-result :out)
      (throw (Exception. (command-result :err))))))

(defn- output-line
  "From a collection of output lines generated by the stress-ng command,
  returns the one associated with the specified stressor."
  [stressor-name output-lines]
  (->> (filter
         #(= stressor-name
             ((clojure.string/split % #"\s+")
               (:stressor-name column-in-stress-ng-output)))
         output-lines)
       (first)))

(defn- stress-ng-results
  "Extracts the results for the given stressor from the given stress-ng
  output and returns them."
  [stressor-name stress-ng-output]
  (let [output-lines (clojure.string/split-lines stress-ng-output)
        stressor-output-line (output-line stressor-name output-lines)
        stressor-output-line-fields (clojure.string/split
                                      stressor-output-line #"\s+")
        ;; dissoc stressor-name; not needed in output
        output-fields (keys (dissoc column-in-stress-ng-output
                                    :stressor-name))]
    (->> (map #(read-string (stressor-output-line-fields
                              (% column-in-stress-ng-output)))
              output-fields)
         (zipmap output-fields))))

(defn- supported? 
  "Checks whether the received stressors are supported by this library."
  [stressors]
  (->> (map #(contains? available-stressors %) stressors)
       (every? true?)))

(defn run
  "Executes stress-ng with the given stressors and timeout (seconds)
  and returns the results."
  [stressors seconds]
  {:pre (supported? (keys stressors))}
  (let [stress-command-output (stress-ng-output stressors seconds)
        sorted-stressors (into (sorted-map) stressors)
        sorted-stressors-keys (sort (keys stressors))]
    (->> (map #(stress-ng-results (name (key %)) stress-command-output)
              sorted-stressors)
         (zipmap sorted-stressors-keys))))